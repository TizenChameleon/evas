.TH "Render Engine Functions" 3 "Tue Apr 19 2011" "Evas" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Render Engine Functions \- 
.PP
Functions that are used to set the render engine for a given function, and then get that engine working.  

.SS "Functions"

.in +1c
.ti -1c
.RI "EAPI void \fBevas_output_method_set\fP (\fBEvas\fP *e, int render_method)"
.br
.RI "\fISets the output engine for the given evas. \fP"
.ti -1c
.RI "EAPI int \fBevas_output_method_get\fP (const \fBEvas\fP *e)"
.br
.RI "\fIRetrieves the number of the output engine used for the given evas. \fP"
.ti -1c
.RI "EAPI \fBEvas_Engine_Info\fP * \fBevas_engine_info_get\fP (const \fBEvas\fP *e)"
.br
.RI "\fIRetrieves the current render engine info struct from the given evas. \fP"
.ti -1c
.RI "EAPI Eina_Bool \fBevas_engine_info_set\fP (\fBEvas\fP *e, \fBEvas_Engine_Info\fP *info)"
.br
.RI "\fIApplies the engine settings for the given evas from the given \fCEvas_Engine_Info\fP structure. \fP"
.ti -1c
.RI "EAPI int \fBevas_render_method_lookup\fP (const char *name)"
.br
.RI "\fILook up a numeric ID from a string name of a rendering engine. \fP"
.ti -1c
.RI "EAPI Eina_List * \fBevas_render_method_list\fP (void)"
.br
.RI "\fIList all the rendering engines compiled into the copy of the Evas library. \fP"
.ti -1c
.RI "EAPI void \fBevas_render_method_list_free\fP (Eina_List *list)"
.br
.RI "\fIThis function should be called to free a list of engine names. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Functions that are used to set the render engine for a given function, and then get that engine working. 

The following code snippet shows how they can be used to initialise an evas that uses the X11 software engine: 
.PP
.nf
 Evas *evas;
 Evas_Engine_Info_Software_X11 *einfo;
 extern Display *display;
 extern Window win;

 evas_init();

 evas = evas_new();
 evas_output_method_set(evas, evas_render_method_lookup('software_x11'));
 evas_output_size_set(evas, 640, 480);
 evas_output_viewport_set(evas, 0, 0, 640, 480);
 einfo = (Evas_Engine_Info_Software_X11 *)evas_engine_info_get(evas);
 einfo->info.display = display;
 einfo->info.visual = DefaultVisual(display, DefaultScreen(display));
 einfo->info.colormap = DefaultColormap(display, DefaultScreen(display));
 einfo->info.drawable = win;
 einfo->info.depth = DefaultDepth(display, DefaultScreen(display));
 evas_engine_info_set(evas, (Evas_Engine_Info *)einfo);

.fi
.PP
 
.SH "Function Documentation"
.PP 
.SS "EAPI \fBEvas_Engine_Info\fP* evas_engine_info_get (const \fBEvas\fP * e)"
.PP
Retrieves the current render engine info struct from the given evas. The returned structure is publicly modifiable. The contents are valid until either \fBevas_engine_info_set\fP or \fBevas_render\fP are called.
.PP
This structure does not need to be freed by the caller.
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The given evas. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the Engine Info structure. \fCNULL\fP is returned if an engine has not yet been assigned. 
.RE
.PP

.PP
References _Evas_Engine_Info::magic.
.SS "EAPI Eina_Bool evas_engine_info_set (\fBEvas\fP * e, \fBEvas_Engine_Info\fP * info)"
.PP
Applies the engine settings for the given evas from the given \fCEvas_Engine_Info\fP structure. To get the Evas_Engine_Info structure to use, call \fBevas_engine_info_get\fP . Do not try to obtain a pointer to an \fCEvas_Engine_Info\fP structure in any other way.
.PP
You will need to call this function at least once before you can create objects on an evas or render that evas. Some engines allow their settings to be changed more than once.
.PP
Once called, the \fCinfo\fP pointer should be considered invalid.
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The pointer to the Evas Canvas 
.br
\fIinfo\fP The pointer to the Engine Info to use 
.RE
.PP
\fBReturns:\fP
.RS 4
1 if no error occurred, 0 otherwise 
.RE
.PP

.PP
References _Evas_Engine_Info::magic.
.SS "EAPI int evas_output_method_get (const \fBEvas\fP * e)"
.PP
Retrieves the number of the output engine used for the given evas. \fBParameters:\fP
.RS 4
\fIe\fP The given evas. 
.RE
.PP
\fBReturns:\fP
.RS 4
The ID number of the output engine being used. \fC0\fP is returned if there is an error. 
.RE
.PP

.SS "EAPI void evas_output_method_set (\fBEvas\fP * e, int render_method)"
.PP
Sets the output engine for the given evas. Once the output engine for an evas is set, any attempt to change it will be ignored. The value for \fCrender_method\fP can be found using \fBevas_render_method_lookup\fP .
.PP
\fBAttention:\fP
.RS 4
it is mandatory that one calls \fBevas_init()\fP before setting the output method.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The given evas. 
.br
\fIrender_method\fP The numeric engine value to use. 
.RE
.PP

.SS "EAPI Eina_List* evas_render_method_list (void)"
.PP
List all the rendering engines compiled into the copy of the Evas library. \fBReturns:\fP
.RS 4
A linked list whose data members are C strings of engine names
.RE
.PP
Calling this will return a handle (pointer) to an Evas linked list. Each node in the linked list will have the data pointer be a (char *) pointer to the string name of the rendering engine available. The strings should never be modified, neither should the list be modified. This list should be cleaned up as soon as the program no longer needs it using \fBevas_render_method_list_free()\fP. If no engines are available from Evas, NULL will be returned.
.PP
Example: 
.PP
.nf
 Eina_List *engine_list, *l;
 char *engine_name;

 engine_list = evas_render_method_list();
 if (!engine_list)
   {
     fprintf(stderr, 'ERROR: Evas supports no engines! Exit.\n');
     exit(-1);
   }
 printf('Availible Evas Engines:\n');
 EINA_LIST_FOREACH(engine_list, l, engine_name)
     printf('%s\n', engine_name);
 evas_render_method_list_free(engine_list);

.fi
.PP
 
.SS "EAPI void evas_render_method_list_free (Eina_List * list)"
.PP
This function should be called to free a list of engine names. \fBParameters:\fP
.RS 4
\fIlist\fP The Eina_List base pointer for the engine list to be freed
.RE
.PP
When this function is called it will free the engine list passed in as \fClist\fP. The list should only be a list of engines generated by calling \fBevas_render_method_list()\fP. If \fClist\fP is NULL, nothing will happen.
.PP
Example: 
.PP
.nf
 Eina_List *engine_list, *l;
 char *engine_name;

 engine_list = evas_render_method_list();
 if (!engine_list)
   {
     fprintf(stderr, 'ERROR: Evas supports no engines! Exit.\n');
     exit(-1);
   }
 printf('Availible Evas Engines:\n');
 EINA_LIST_FOREACH(engine_list, l, engine_name)
     printf('%s\n', engine_name);
 evas_render_method_list_free(engine_list);

.fi
.PP
 
.SS "EAPI int evas_render_method_lookup (const char * name)"
.PP
Look up a numeric ID from a string name of a rendering engine. \fBParameters:\fP
.RS 4
\fIname\fP The string name of an engine 
.RE
.PP
\fBReturns:\fP
.RS 4
A numeric (opaque) ID for the rendering engine
.RE
.PP
This function looks up a numeric return value for the named engine in the string \fCname\fP. This is a normal C string, NUL byte terminated. The name is case sensitive. If the rendering engine is available, a numeric ID for that engine is returned that is not 0. If the engine is not available, 0 is returned, indicating an invalid engine.
.PP
The programmer should NEVER rely on the numeric ID of an engine unless it is returned by this function. Programs should NOT be written accessing render method ID's directly, without first obtaining it from this function.
.PP
\fBAttention:\fP
.RS 4
it is mandatory that one calls \fBevas_init()\fP before looking up the render method.
.RE
.PP
Example: 
.PP
.nf
 int engine_id;
 Evas *evas;

 evas_init();

 evas = evas_new();
 if (!evas)
   {
     fprintf(stderr, 'ERROR: Canvas creation failed. Fatal error.\n');
     exit(-1);
   }
 engine_id = evas_render_method_lookup('software_x11');
 if (!engine_id)
   {
     fprintf(stderr, 'ERROR: Requested rendering engine is absent.\n');
     exit(-1);
   }
 evas_output_method_set(evas, engine_id);

.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for Evas from the source code.
