.TH "Event Feeding Functions" 3 "Tue Apr 19 2011" "Evas" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Event Feeding Functions \- 
.PP
Functions to tell Evas that events happened and should be processed.  

.SS "Functions"

.in +1c
.ti -1c
.RI "EAPI int \fBevas_event_freeze_get\fP (const \fBEvas\fP *e)"
.br
.RI "\fIReturn the freeze count of a given canvas. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_mouse_down\fP (\fBEvas\fP *e, int b, \fBEvas_Button_Flags\fP flags, unsigned int timestamp, const void *data)"
.br
.RI "\fIMouse down event feed. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_mouse_up\fP (\fBEvas\fP *e, int b, \fBEvas_Button_Flags\fP flags, unsigned int timestamp, const void *data)"
.br
.RI "\fIMouse up event feed. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_mouse_cancel\fP (\fBEvas\fP *e, unsigned int timestamp, const void *data)"
.br
.RI "\fIMouse cancel event feed. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_mouse_wheel\fP (\fBEvas\fP *e, int direction, int z, unsigned int timestamp, const void *data)"
.br
.RI "\fIMouse wheel event feed. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_mouse_move\fP (\fBEvas\fP *e, int x, int y, unsigned int timestamp, const void *data)"
.br
.RI "\fIMouse move event feed. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_mouse_in\fP (\fBEvas\fP *e, unsigned int timestamp, const void *data)"
.br
.RI "\fIMouse in event feed. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_mouse_out\fP (\fBEvas\fP *e, unsigned int timestamp, const void *data)"
.br
.RI "\fIMouse out event feed. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_key_down\fP (\fBEvas\fP *e, const char *keyname, const char *key, const char *string, const char *compose, unsigned int timestamp, const void *data)"
.br
.RI "\fIKey down event feed. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_key_up\fP (\fBEvas\fP *e, const char *keyname, const char *key, const char *string, const char *compose, unsigned int timestamp, const void *data)"
.br
.RI "\fIKey up event feed. \fP"
.ti -1c
.RI "EAPI void \fBevas_event_feed_hold\fP (\fBEvas\fP *e, int hold, unsigned int timestamp, const void *data)"
.br
.RI "\fIHold event feed. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Functions to tell Evas that events happened and should be processed. 

As explained in \fBWhat Evas is not?\fP, Evas does not know how to poll for events, so the developer should do it and then feed such events to the canvas to be processed. This is only required if operating Evas directly as modules such as Ecore_Evas does that for you. 
.SH "Function Documentation"
.PP 
.SS "EAPI void evas_event_feed_hold (\fBEvas\fP * e, int hold, unsigned int timestamp, const void * data)"
.PP
Hold event feed. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fIhold\fP The hold. 
.br
\fItimestamp\fP The timestamp of the mouse up event. 
.br
\fIdata\fP The data for canvas.
.RE
.PP
This function makes the object to stop sending events. 
.PP
References EVAS_CALLBACK_HOLD, and _Evas_Event_Hold::hold.
.SS "EAPI void evas_event_feed_key_down (\fBEvas\fP * e, const char * keyname, const char * key, const char * string, const char * compose, unsigned int timestamp, const void * data)"
.PP
Key down event feed. \fBParameters:\fP
.RS 4
\fIe\fP The canvas to thaw out 
.br
\fIkeyname\fP Name of the key 
.br
\fIkey\fP The key pressed. 
.br
\fIstring\fP A String 
.br
\fIcompose\fP The compose string 
.br
\fItimestamp\fP Timestamp of the mouse up event 
.br
\fIdata\fP Data for canvas.
.RE
.PP
This function will set some evas properties that is necessary when a key is pressed. It prepares information to be treated by the callback function. 
.PP
References _Evas_Event_Key_Down::compose, EVAS_CALLBACK_KEY_DOWN, _Evas_Event_Key_Down::key, _Evas_Event_Key_Down::keyname, and _Evas_Event_Key_Down::string.
.SS "EAPI void evas_event_feed_key_up (\fBEvas\fP * e, const char * keyname, const char * key, const char * string, const char * compose, unsigned int timestamp, const void * data)"
.PP
Key up event feed. \fBParameters:\fP
.RS 4
\fIe\fP The canvas to thaw out 
.br
\fIkeyname\fP Name of the key 
.br
\fIkey\fP The key released. 
.br
\fIstring\fP string 
.br
\fIcompose\fP compose 
.br
\fItimestamp\fP Timestamp of the mouse up event 
.br
\fIdata\fP Data for canvas.
.RE
.PP
This function will set some evas properties that is necessary when a key is released. It prepares information to be treated by the callback function. 
.PP
References _Evas_Event_Key_Up::compose, EVAS_CALLBACK_KEY_UP, _Evas_Event_Key_Up::key, _Evas_Event_Key_Up::keyname, and _Evas_Event_Key_Up::string.
.SS "EAPI void evas_event_feed_mouse_cancel (\fBEvas\fP * e, unsigned int timestamp, const void * data)"
.PP
Mouse cancel event feed. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fItimestamp\fP The timestamp of the mouse up event. 
.br
\fIdata\fP The data for canvas.
.RE
.PP
This function will call \fBevas_event_feed_mouse_up()\fP when a mouse cancel event happens. 
.PP
References evas_event_feed_mouse_up().
.SS "EAPI void evas_event_feed_mouse_down (\fBEvas\fP * e, int b, \fBEvas_Button_Flags\fP flags, unsigned int timestamp, const void * data)"
.PP
Mouse down event feed. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fIb\fP The button number. 
.br
\fIflags\fP The evas button flags. 
.br
\fItimestamp\fP The timestamp of the mouse down event. 
.br
\fIdata\fP The data for canvas.
.RE
.PP
This function will set some evas properties that is necessary when the mouse button is pressed. It prepares information to be treated by the callback function. 
.PP
References _Evas_Event_Mouse_Down::button, and EVAS_CALLBACK_MOUSE_DOWN.
.SS "EAPI void evas_event_feed_mouse_in (\fBEvas\fP * e, unsigned int timestamp, const void * data)"
.PP
Mouse in event feed. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fItimestamp\fP The timestamp of the mouse up event. 
.br
\fIdata\fP The data for canvas.
.RE
.PP
This function will set some evas properties that is necessary when the mouse in event happens. It prepares information to be treated by the callback function. 
.PP
References _Evas_Event_Mouse_In::buttons, EVAS_CALLBACK_MOUSE_IN, and evas_event_feed_mouse_move().
.SS "EAPI void evas_event_feed_mouse_move (\fBEvas\fP * e, int x, int y, unsigned int timestamp, const void * data)"
.PP
Mouse move event feed. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fIx\fP The horizontal position of the mouse pointer. 
.br
\fIy\fP The vertical position of the mouse pointer. 
.br
\fItimestamp\fP The timestamp of the mouse up event. 
.br
\fIdata\fP The data for canvas.
.RE
.PP
This function will set some evas properties that is necessary when the mouse is moved from its last position. It prepares information to be treated by the callback function. 
.PP
References _Evas_Event_Mouse_In::buttons, _Evas_Event_Mouse_Out::buttons, _Evas_Event_Mouse_Move::buttons, EVAS_CALLBACK_MOUSE_IN, EVAS_CALLBACK_MOUSE_MOVE, and EVAS_CALLBACK_MOUSE_OUT.
.PP
Referenced by evas_event_feed_mouse_in(), evas_event_feed_mouse_up(), evas_object_clip_set(), evas_object_clip_unset(), evas_object_hide(), evas_object_layer_set(), evas_object_line_xy_set(), evas_object_lower(), evas_object_move(), evas_object_pass_events_set(), evas_object_polygon_point_add(), evas_object_polygon_points_clear(), evas_object_raise(), evas_object_repeat_events_set(), evas_object_resize(), evas_object_show(), evas_object_stack_above(), evas_object_stack_below(), evas_object_text_font_set(), and evas_object_text_text_set().
.SS "EAPI void evas_event_feed_mouse_out (\fBEvas\fP * e, unsigned int timestamp, const void * data)"
.PP
Mouse out event feed. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fItimestamp\fP Timestamp of the mouse up event. 
.br
\fIdata\fP The data for canvas.
.RE
.PP
This function will set some evas properties that is necessary when the mouse out event happens. It prepares information to be treated by the callback function. 
.PP
References _Evas_Event_Mouse_Out::buttons, and EVAS_CALLBACK_MOUSE_OUT.
.SS "EAPI void evas_event_feed_mouse_up (\fBEvas\fP * e, int b, \fBEvas_Button_Flags\fP flags, unsigned int timestamp, const void * data)"
.PP
Mouse up event feed. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fIb\fP The button number. 
.br
\fIflags\fP evas button flags. 
.br
\fItimestamp\fP The timestamp of the mouse up event. 
.br
\fIdata\fP The data for canvas.
.RE
.PP
This function will set some evas properties that is necessary when the mouse button is released. It prepares information to be treated by the callback function. 
.PP
References _Evas_Event_Mouse_Up::button, _Evas_Event_Mouse_In::buttons, _Evas_Event_Mouse_Out::buttons, EVAS_CALLBACK_MOUSE_IN, EVAS_CALLBACK_MOUSE_OUT, EVAS_CALLBACK_MOUSE_UP, and evas_event_feed_mouse_move().
.PP
Referenced by evas_event_feed_mouse_cancel().
.SS "EAPI void evas_event_feed_mouse_wheel (\fBEvas\fP * e, int direction, int z, unsigned int timestamp, const void * data)"
.PP
Mouse wheel event feed. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fIdirection\fP The wheel mouse direction. 
.br
\fIz\fP How much mouse wheel was scrolled up or down. 
.br
\fItimestamp\fP The timestamp of the mouse up event. 
.br
\fIdata\fP The data for canvas.
.RE
.PP
This function will set some evas properties that is necessary when the mouse wheel is scrolled up or down. It prepares information to be treated by the callback function. 
.PP
References EVAS_CALLBACK_MOUSE_WHEEL.
.SS "EAPI int evas_event_freeze_get (const \fBEvas\fP * e)"
.PP
Return the freeze count of a given canvas. \fBParameters:\fP
.RS 4
\fIe\fP The canvas to fetch the freeze count from.
.RE
.PP
This returns the number of times the canvas has been told to freeze events. It is possible to call \fBevas_event_freeze()\fP multiple times, and these must be matched by \fBevas_event_thaw()\fP calls. This call allows the program to discover just how many times things have been frozen in case it may want to break out of a deep freeze state where the count is high.
.PP
Example: 
.PP
.nf
 extern Evas *evas;

 while (evas_event_freeze_get(evas) > 0) evas_event_thaw(evas);

.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for Evas from the source code.
