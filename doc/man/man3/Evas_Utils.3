.TH "General Utilities" 3 "Tue Apr 19 2011" "Evas" \" -*- nroff -*-
.ad l
.nh
.SH NAME
General Utilities \- 
.PP
Some functions that are handy but are not specific of canvas or objects.  

.SS "Functions"

.in +1c
.ti -1c
.RI "EAPI const char * \fBevas_load_error_str\fP (\fBEvas_Load_Error\fP error)"
.br
.RI "\fIConverts the given error code into a string describing it in english. \fP"
.ti -1c
.RI "EAPI void \fBevas_color_hsv_to_rgb\fP (float h, float s, float v, int *r, int *g, int *b)"
.br
.RI "\fIConvert a given color from HSV to RGB format. \fP"
.ti -1c
.RI "EAPI void \fBevas_color_rgb_to_hsv\fP (int r, int g, int b, float *h, float *s, float *v)"
.br
.RI "\fIConvert a given color from RGB to HSV format. \fP"
.ti -1c
.RI "EAPI void \fBevas_color_argb_premul\fP (int a, int *r, int *g, int *b)"
.br
.RI "\fIPre-multiplies a rgb triplet by an alpha factor. \fP"
.ti -1c
.RI "EAPI void \fBevas_color_argb_unpremul\fP (int a, int *r, int *g, int *b)"
.br
.RI "\fIUndo pre-multiplication of a rgb triplet by an alpha factor. \fP"
.ti -1c
.RI "EAPI void \fBevas_data_argb_premul\fP (unsigned int *data, unsigned int len)"
.br
.RI "\fIPre-multiplies data by an alpha factor. \fP"
.ti -1c
.RI "EAPI void \fBevas_data_argb_unpremul\fP (unsigned int *data, unsigned int len)"
.br
.RI "\fIUndo pre-multiplication data by an alpha factor. \fP"
.ti -1c
.RI "EAPI int \fBevas_string_char_next_get\fP (const char *str, int pos, int *decoded)"
.br
.RI "\fIGets the next character in the string. \fP"
.ti -1c
.RI "EAPI int \fBevas_string_char_prev_get\fP (const char *str, int pos, int *decoded)"
.br
.RI "\fIGets the previous character in the string. \fP"
.ti -1c
.RI "EAPI int \fBevas_string_char_len_get\fP (const char *str)"
.br
.RI "\fIGet the length in characters of the string. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Some functions that are handy but are not specific of canvas or objects. 
.SH "Function Documentation"
.PP 
.SS "EAPI void evas_color_argb_premul (int a, int * r, int * g, int * b)"
.PP
Pre-multiplies a rgb triplet by an alpha factor. \fBParameters:\fP
.RS 4
\fIa\fP The alpha factor. 
.br
\fIr\fP The Red component of the color. 
.br
\fIg\fP The Green component of the color. 
.br
\fIb\fP The Blue component of the color.
.RE
.PP
This function pre-multiplies a given rbg triplet by an alpha factor. Alpha factor is used to define transparency. 
.SS "EAPI void evas_color_argb_unpremul (int a, int * r, int * g, int * b)"
.PP
Undo pre-multiplication of a rgb triplet by an alpha factor. \fBParameters:\fP
.RS 4
\fIa\fP The alpha factor. 
.br
\fIr\fP The Red component of the color. 
.br
\fIg\fP The Green component of the color. 
.br
\fIb\fP The Blue component of the color.
.RE
.PP
This function undoes pre-multiplication a given rbg triplet by an alpha factor. Alpha factor is used to define transparency.
.PP
\fBSee also:\fP
.RS 4
\fBevas_color_argb_premul()\fP. 
.RE
.PP

.SS "EAPI void evas_color_hsv_to_rgb (float h, float s, float v, int * r, int * g, int * b)"
.PP
Convert a given color from HSV to RGB format. \fBParameters:\fP
.RS 4
\fIh\fP The Hue component of the color. 
.br
\fIs\fP The Saturation component of the color. 
.br
\fIv\fP The Value component of the color. 
.br
\fIr\fP The Red component of the color. 
.br
\fIg\fP The Green component of the color. 
.br
\fIb\fP The Blue component of the color.
.RE
.PP
This function converts a given color in HSV color format to RGB color format. 
.SS "EAPI void evas_color_rgb_to_hsv (int r, int g, int b, float * h, float * s, float * v)"
.PP
Convert a given color from RGB to HSV format. \fBParameters:\fP
.RS 4
\fIr\fP The Red component of the color. 
.br
\fIg\fP The Green component of the color. 
.br
\fIb\fP The Blue component of the color. 
.br
\fIh\fP The Hue component of the color. 
.br
\fIs\fP The Saturation component of the color. 
.br
\fIv\fP The Value component of the color.
.RE
.PP
This function converts a given color in RGB color format to HSV color format. 
.SS "EAPI void evas_data_argb_premul (unsigned int * data, unsigned int len)"
.PP
Pre-multiplies data by an alpha factor. \fBParameters:\fP
.RS 4
\fIdata\fP The data value. 
.br
\fIlen\fP The length value.
.RE
.PP
This function pre-multiplies a given data by an alpha factor. Alpha factor is used to define transparency. 
.SS "EAPI void evas_data_argb_unpremul (unsigned int * data, unsigned int len)"
.PP
Undo pre-multiplication data by an alpha factor. \fBParameters:\fP
.RS 4
\fIdata\fP The data value. 
.br
\fIlen\fP The length value.
.RE
.PP
This function undoes pre-multiplication of a given data by an alpha factor. Alpha factor is used to define transparency. 
.SS "EAPI const char* evas_load_error_str (\fBEvas_Load_Error\fP error)"
.PP
Converts the given error code into a string describing it in english. \fBParameters:\fP
.RS 4
\fIerror\fP the error code. 
.RE
.PP
\fBReturns:\fP
.RS 4
Always return a valid string. If given \fCerror\fP is not supported 'Unknown error' is returned. 
.RE
.PP

.PP
References EVAS_LOAD_ERROR_CORRUPT_FILE, EVAS_LOAD_ERROR_DOES_NOT_EXIST, EVAS_LOAD_ERROR_GENERIC, EVAS_LOAD_ERROR_NONE, EVAS_LOAD_ERROR_PERMISSION_DENIED, EVAS_LOAD_ERROR_RESOURCE_ALLOCATION_FAILED, and EVAS_LOAD_ERROR_UNKNOWN_FORMAT.
.SS "EAPI int evas_string_char_len_get (const char * str)"
.PP
Get the length in characters of the string. \fBParameters:\fP
.RS 4
\fIstr\fP The string to get the length of. 
.RE
.PP
\fBReturns:\fP
.RS 4
The length in characters (not bytes) 
.RE
.PP

.SS "EAPI int evas_string_char_next_get (const char * str, int pos, int * decoded)"
.PP
Gets the next character in the string. Given the UTF-8 string in \fCstr\fP, and starting byte position in \fCpos\fP, this function will place in \fCdecoded\fP the decoded code point at \fCpos\fP and return the byte index for the next character in the string.
.PP
The only boundary check done is that \fCpos\fP must be >= 0. Other than that, no checks are performed, so passing an index value that's not within the length of the string will result in undefined behavior.
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP The UTF-8 string 
.br
\fIpos\fP The byte index where to start 
.br
\fIdecoded\fP Address where to store the decoded code point. Optional.
.RE
.PP
\fBReturns:\fP
.RS 4
The byte index of the next character 
.RE
.PP

.SS "EAPI int evas_string_char_prev_get (const char * str, int pos, int * decoded)"
.PP
Gets the previous character in the string. Given the UTF-8 string in \fCstr\fP, and starting byte position in \fCpos\fP, this function will place in \fCdecoded\fP the decoded code point at \fCpos\fP and return the byte index for the previous character in the string.
.PP
The only boundary check done is that \fCpos\fP must be >= 1. Other than that, no checks are performed, so passing an index value that's not within the length of the string will result in undefined behavior.
.PP
\fBParameters:\fP
.RS 4
\fIstr\fP The UTF-8 string 
.br
\fIpos\fP The byte index where to start 
.br
\fIdecoded\fP Address where to store the decoded code point. Optional.
.RE
.PP
\fBReturns:\fP
.RS 4
The byte index of the previous character 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Evas from the source code.
