.TH "Pointer (Mouse) Functions" 3 "Tue Apr 19 2011" "Evas" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Pointer (Mouse) Functions \- 
.PP
Functions that deal with the status of the pointer (mouse cursor).  

.SS "Functions"

.in +1c
.ti -1c
.RI "EAPI void \fBevas_pointer_output_xy_get\fP (const \fBEvas\fP *e, int *x, int *y)"
.br
.RI "\fIThis function returns the current known pointer co-ordinates. \fP"
.ti -1c
.RI "EAPI void \fBevas_pointer_canvas_xy_get\fP (const \fBEvas\fP *e, Evas_Coord *x, Evas_Coord *y)"
.br
.RI "\fIThis function returns the current known pointer co-ordinates. \fP"
.ti -1c
.RI "EAPI int \fBevas_pointer_button_down_mask_get\fP (const \fBEvas\fP *e)"
.br
.RI "\fIReturns a bitmask with the mouse buttons currently pressed, set to 1. \fP"
.ti -1c
.RI "EAPI Eina_Bool \fBevas_pointer_inside_get\fP (const \fBEvas\fP *e)"
.br
.RI "\fIReturns whether the mouse pointer is logically inside the canvas. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Functions that deal with the status of the pointer (mouse cursor). 
.SH "Function Documentation"
.PP 
.SS "EAPI int evas_pointer_button_down_mask_get (const \fBEvas\fP * e)"
.PP
Returns a bitmask with the mouse buttons currently pressed, set to 1. \fBParameters:\fP
.RS 4
\fIe\fP The pointer to the Evas Canvas 
.RE
.PP
\fBReturns:\fP
.RS 4
A bitmask of the currently depressed buttons on the cavas
.RE
.PP
Calling this function will return a 32-bit integer with the appropriate bits set to 1 that correspond to a mouse button being depressed. This limits Evas to a mouse devices with a maximum of 32 buttons, but that is generally in excess of any host system's pointing device abilities.
.PP
A canvas by default begins with no mouse buttons being pressed and only calls to \fBevas_event_feed_mouse_down()\fP, evas_event_feed_mouse_down_data(), \fBevas_event_feed_mouse_up()\fP and evas_event_feed_mouse_up_data() will alter that.
.PP
The least significant bit corresponds to the first mouse button (button 1) and the most significant bit corresponds to the last mouse button (button 32).
.PP
If \fCe\fP is not a valid canvas, the return value is undefined.
.PP
Example: 
.PP
.nf
 extern Evas *evas;
 int button_mask, i;

 button_mask = evas_pointer_button_down_mask_get(evas);
 printf('Buttons currently pressed:\n');
 for (i = 0; i < 32; i++)
   {
     if ((button_mask & (1 << i)) != 0) printf('Button %i\n', i + 1);
   }

.fi
.PP
 
.SS "EAPI void evas_pointer_canvas_xy_get (const \fBEvas\fP * e, Evas_Coord * x, Evas_Coord * y)"
.PP
This function returns the current known pointer co-ordinates. \fBParameters:\fP
.RS 4
\fIe\fP The pointer to the Evas Canvas 
.br
\fIx\fP The pointer to a Evas_Coord to be filled in 
.br
\fIy\fP The pointer to a Evas_Coord to be filled in
.RE
.PP
This function returns the current known canvas unit co-ordinates of the mouse pointer and sets the contents of the Evas_Coords pointed to by \fCx\fP and \fCy\fP to contain these co-ordinates. If \fCe\fP is not a valid canvas the results of this function are undefined.
.PP
Example: 
.PP
.nf
 extern Evas *evas;
 Evas_Coord mouse_x, mouse_y;

 evas_pointer_output_xy_get(evas, &mouse_x, &mouse_y);
 printf('Mouse is at canvas position %f, %f\n', mouse_x, mouse_y);

.fi
.PP
 
.SS "EAPI Eina_Bool evas_pointer_inside_get (const \fBEvas\fP * e)"
.PP
Returns whether the mouse pointer is logically inside the canvas. \fBParameters:\fP
.RS 4
\fIe\fP The pointer to the Evas Canvas 
.RE
.PP
\fBReturns:\fP
.RS 4
An integer that is 1 if the mouse is inside the canvas, 0 otherwise
.RE
.PP
When this function is called it will return a value of either 0 or 1, depending on if \fBevas_event_feed_mouse_in()\fP, evas_event_feed_mouse_in_data(), or \fBevas_event_feed_mouse_out()\fP, evas_event_feed_mouse_out_data() have been called to feed in a mouse enter event into the canvas.
.PP
A return value of 1 indicates the mouse is logically inside the canvas, and 0 implies it is logically outside the canvas.
.PP
A canvas begins with the mouse being assumed outside (0).
.PP
If \fCe\fP is not a valid canvas, the return value is undefined.
.PP
Example: 
.PP
.nf
 extern Evas *evas;

 if (evas_pointer_inside_get(evas)) printf('Mouse is in!\n');
 else printf('Mouse is out!\n');

.fi
.PP
 
.SS "EAPI void evas_pointer_output_xy_get (const \fBEvas\fP * e, int * x, int * y)"
.PP
This function returns the current known pointer co-ordinates. \fBParameters:\fP
.RS 4
\fIe\fP The pointer to the Evas Canvas 
.br
\fIx\fP The pointer to an integer to be filled in 
.br
\fIy\fP The pointer to an integer to be filled in
.RE
.PP
This function returns the current known screen/output co-ordinates of the mouse pointer and sets the contents of the integers pointed to by \fCx\fP and \fCy\fP to contain these co-ordinates. If \fCe\fP is not a valid canvas the results of this function are undefined.
.PP
Example: 
.PP
.nf
 extern Evas *evas;
 int mouse_x, mouse_y;

 evas_pointer_output_xy_get(evas, &mouse_x, &mouse_y);
 printf('Mouse is at screen position %i, %i\n', mouse_x, mouse_y);

.fi
.PP
 
.SH "Author"
.PP 
Generated automatically by Doxygen for Evas from the source code.
