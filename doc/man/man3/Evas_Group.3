.TH "Top Level Functions" 3 "Tue Apr 19 2011" "Evas" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Top Level Functions \- 
.PP
Functions that affect Evas as a whole.  

.SS "Functions"

.in +1c
.ti -1c
.RI "EAPI int \fBevas_async_events_fd_get\fP (void)"
.br
.RI "\fIGet evas' internal asynchronous events read file descriptor. \fP"
.ti -1c
.RI "EAPI int \fBevas_async_events_process\fP (void)"
.br
.RI "\fITrigger the processing of all events waiting on the file descriptor returned by \fBevas_async_events_fd_get()\fP. \fP"
.ti -1c
.RI "EAPI Eina_Bool \fBevas_async_events_put\fP (const void *target, \fBEvas_Callback_Type\fP type, void *event_info, Evas_Async_Events_Put_Cb func)"
.br
.RI "\fIInsert asynchronous events on the canvas. \fP"
.ti -1c
.RI "EAPI int \fBevas_init\fP (void)"
.br
.RI "\fIInitialize Evas. \fP"
.ti -1c
.RI "EAPI int \fBevas_shutdown\fP (void)"
.br
.RI "\fIShutdown Evas. \fP"
.ti -1c
.RI "EAPI \fBEvas_Alloc_Error\fP \fBevas_alloc_error\fP (void)"
.br
.RI "\fIReturn if any allocation errors have occurred during the prior function. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Functions that affect Evas as a whole. 
.SH "Function Documentation"
.PP 
.SS "EAPI \fBEvas_Alloc_Error\fP evas_alloc_error (void)"
.PP
Return if any allocation errors have occurred during the prior function. \fBReturns:\fP
.RS 4
The allocation error flag
.RE
.PP
This function will return if any memory allocation errors occurred during, and what kind they were. The return value will be one of EVAS_ALLOC_ERROR_NONE, EVAS_ALLOC_ERROR_FATAL or EVAS_ALLOC_ERROR_RECOVERED with each meaning something different.
.PP
EVAS_ALLOC_ERROR_NONE means that no errors occurred at all and the function worked as expected.
.PP
EVAS_ALLOC_ERROR_FATAL means the function was completely unable to perform its job and will have exited as cleanly as possible. The programmer should consider this as a sign of very low memory and should try and safely recover from the prior functions failure (or try free up memory elsewhere and try again after more memory is freed).
.PP
EVAS_ALLOC_ERROR_RECOVERED means that an allocation error occurred, but was recovered from by evas finding memory of its own it has allocated and freeing what it sees as not really usefully allocated memory. What is freed may vary. Evas may reduce the resolution of images, free cached images or fonts, trhow out pre-rendered data, reduce the complexity of change lists etc. Evas and the program will function as per normal after this, but this is a sign of low memory, and it is suggested that the program try and identify memory it doesn't need, and free it.
.PP
Example: 
.PP
.nf
 extern Evas_Object *object;
 void callback (void *data, Evas *e, Evas_Object *obj, void *event_info);

 evas_object_event_callback_add(object, EVAS_CALLBACK_MOUSE_DOWN, callback, NULL);
 if (evas_alloc_error() == EVAS_ALLOC_ERROR_FATAL)
   {
     fprintf(stderr, 'ERROR: Completely unable to attach callabck. Must\n');
     fprintf(stderr, '       destroy object now as it cannot be used.\n');
     evas_object_del(object);
     object = NULL;
     fprintf(stderr, 'WARNING: Memory is really low. Cleaning out RAM.\n');
     my_memory_cleanup();
   }
 if (evas_alloc_error() == EVAS_ALLOC_ERROR_RECOVERED)
   {
     fprintf(stderr, 'WARNING: Memory is really low. Cleaning out RAM.\n');
     my_memory_cleanup();
   }

.fi
.PP
 
.SS "EAPI int evas_async_events_fd_get (void)"
.PP
Get evas' internal asynchronous events read file descriptor. \fBReturns:\fP
.RS 4
The canvas' asynchronous events read file descriptor.
.RE
.PP
Evas' asynchronous events are meant to be dealt with internally, i. e., when building stuff to be glued together into the EFL infrastructure -- a module, for example. The context which demands its use is when calculations need to be done out of the main thread, asynchronously, and some action must be performed after that.
.PP
An example of actual use of this API is for image asynchronous preload inside evas. If the canvas was instantiated through ecore-evas usage, ecore itself will take care of calling those events' processing.
.PP
This function returns the read file descriptor where to get the asynchronous events of the canvas. Naturally, other mainloops, apart from ecore, may make use of it. 
.SS "EAPI int evas_async_events_process (void)"
.PP
Trigger the processing of all events waiting on the file descriptor returned by \fBevas_async_events_fd_get()\fP. \fBReturns:\fP
.RS 4
The number of events processed.
.RE
.PP
All asynchronous events queued up by \fBevas_async_events_put()\fP are processed here. More precisely, the callback functions, informed together with other event parameters, when queued, get called (with those parameters), in that order. 
.SS "EAPI Eina_Bool evas_async_events_put (const void * target, \fBEvas_Callback_Type\fP type, void * event_info, Evas_Async_Events_Put_Cb func)"
.PP
Insert asynchronous events on the canvas. \fBParameters:\fP
.RS 4
\fItarget\fP The target to be affected by the events. 
.br
\fItype\fP The type of callback function. 
.br
\fIevent_info\fP Information about the event. 
.br
\fIfunc\fP The callback function pointer.
.RE
.PP
This is the way, for a routine running outside evas' main thread, to report an asynchronous event. A callback function is informed, whose call is to happen after \fBevas_async_events_process()\fP is called. 
.SS "EAPI int evas_init (void)"
.PP
Initialize Evas. \fBReturns:\fP
.RS 4
The init counter value.
.RE
.PP
This function initialize evas, increments a counter of the number of calls to this function and returns this value.
.PP
\fBSee also:\fP
.RS 4
\fBevas_shutdown()\fP. 
.RE
.PP

.SS "EAPI int evas_shutdown (void)"
.PP
Shutdown Evas. \fBReturns:\fP
.RS 4
The init counter value.
.RE
.PP
This function finalize evas, decrements the counter of the number of calls to the function \fBevas_init()\fP and returns this value.
.PP
\fBSee also:\fP
.RS 4
\fBevas_init()\fP. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Evas from the source code.
