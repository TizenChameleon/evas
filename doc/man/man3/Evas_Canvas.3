.TH "Canvas Functions" 3 "Tue Apr 19 2011" "Evas" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Canvas Functions \- 
.PP
Functions that deal with the basic evas object.  

.SS "Modules"

.in +1c
.ti -1c
.RI "\fBRender Engine Functions\fP"
.br
.PP

.RI "\fIFunctions that are used to set the render engine for a given function, and then get that engine working. \fP"
.ti -1c
.RI "\fBOutput and Viewport Resizing Functions\fP"
.br
.PP

.RI "\fIFunctions that set and retrieve the output and viewport size of an evas. \fP"
.ti -1c
.RI "\fBCoordinate Mapping Functions\fP"
.br
.PP

.RI "\fIFunctions that are used to map coordinates from the canvas to the screen or the screen to the canvas. \fP"
.ti -1c
.RI "\fBPointer (Mouse) Functions\fP"
.br
.PP

.RI "\fIFunctions that deal with the status of the pointer (mouse cursor). \fP"
.ti -1c
.RI "\fBEvent Freezing Functions\fP"
.br
.PP

.RI "\fIFunctions that deal with the freezing of event processing of an evas. \fP"
.ti -1c
.RI "\fBEvent Feeding Functions\fP"
.br
.PP

.RI "\fIFunctions to tell Evas that events happened and should be processed. \fP"
.ti -1c
.RI "\fBCanvas Events\fP"
.br
.PP

.RI "\fICanvas generates some events. \fP"
.ti -1c
.RI "\fBImage Functions\fP"
.br
.PP

.RI "\fIFunctions that deals with images at canvas level. \fP"
.ti -1c
.RI "\fBFont Functions\fP"
.br
.PP

.RI "\fIFunctions that deals with fonts. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct _Evas \fBEvas\fP"
.br
.RI "\fIAn Evas canvas handle. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "EAPI \fBEvas\fP * \fBevas_new\fP (void)"
.br
.RI "\fICreates a new empty evas. \fP"
.ti -1c
.RI "EAPI void \fBevas_free\fP (\fBEvas\fP *e)"
.br
.RI "\fIFrees the given evas and any objects created on it. \fP"
.ti -1c
.RI "EAPI void \fBevas_data_attach_set\fP (\fBEvas\fP *e, void *data)"
.br
.RI "\fIAttaches a specific pointer to the evas for fetching later. \fP"
.ti -1c
.RI "EAPI void * \fBevas_data_attach_get\fP (const \fBEvas\fP *e)"
.br
.RI "\fIReturns the pointer attached by \fBevas_data_attach_set()\fP. \fP"
.ti -1c
.RI "EAPI void \fBevas_focus_in\fP (\fBEvas\fP *e)"
.br
.RI "\fIInform to the evas that it got the focus. \fP"
.ti -1c
.RI "EAPI void \fBevas_focus_out\fP (\fBEvas\fP *e)"
.br
.RI "\fIInform to the evas that it lost the focus. \fP"
.ti -1c
.RI "EAPI Eina_Bool \fBevas_focus_state_get\fP (const \fBEvas\fP *e)"
.br
.RI "\fIGet the focus state known by the given evas. \fP"
.ti -1c
.RI "EAPI void \fBevas_nochange_push\fP (\fBEvas\fP *e)"
.br
.RI "\fIPush the nochange flag up 1. \fP"
.ti -1c
.RI "EAPI void \fBevas_nochange_pop\fP (\fBEvas\fP *e)"
.br
.RI "\fIPop the nochange flag down 1. \fP"
.ti -1c
.RI "EAPI void \fBevas_damage_rectangle_add\fP (\fBEvas\fP *e, int x, int y, int w, int h)"
.br
.RI "\fIAdd a damage rectangle. \fP"
.ti -1c
.RI "EAPI void \fBevas_obscured_rectangle_add\fP (\fBEvas\fP *e, int x, int y, int w, int h)"
.br
.RI "\fIAdd an obscured region. \fP"
.ti -1c
.RI "EAPI void \fBevas_obscured_clear\fP (\fBEvas\fP *e)"
.br
.RI "\fIRemove all obscured region rectangles from the canvas. \fP"
.ti -1c
.RI "EAPI void \fBevas_render_updates_free\fP (Eina_List *updates)"
.br
.RI "\fIFree the rectangles returned by \fBevas_render_updates()\fP. \fP"
.ti -1c
.RI "EAPI Eina_List * \fBevas_render_updates\fP (\fBEvas\fP *e)"
.br
.RI "\fIForce immediate renderization of the given canvas. \fP"
.ti -1c
.RI "EAPI void \fBevas_render\fP (\fBEvas\fP *e)"
.br
.RI "\fIForce renderization of the given canvas. \fP"
.ti -1c
.RI "EAPI void \fBevas_norender\fP (\fBEvas\fP *e)"
.br
.RI "\fIUpdate the canvas internal objects but not triggering immediate renderization. \fP"
.ti -1c
.RI "EAPI void \fBevas_render_idle_flush\fP (\fBEvas\fP *e)"
.br
.RI "\fIMake the canvas discard internally cached data used for rendering. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Functions that deal with the basic evas object. 

They are the functions you need to use at a minimum to get a working evas, and to destroy it. 
.SH "Typedef Documentation"
.PP 
.SS "\fBEvas\fP"
.PP
An Evas canvas handle. \fBSee also:\fP
.RS 4
\fBevas_new()\fP 
.PP
\fBevas_free()\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "EAPI void evas_damage_rectangle_add (\fBEvas\fP * e, int x, int y, int w, int h)"
.PP
Add a damage rectangle. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fIx\fP The rectangle's left position. 
.br
\fIy\fP The rectangle's top position. 
.br
\fIw\fP The rectangle's width. 
.br
\fIh\fP The rectangle's height.
.RE
.PP
This is the function by which one tells evas that a part of the canvas has to be repainted. 
.PP
Referenced by evas_object_clip_set(), and evas_object_clip_unset().
.SS "EAPI void* evas_data_attach_get (const \fBEvas\fP * e)"
.PP
Returns the pointer attached by \fBevas_data_attach_set()\fP. \fBParameters:\fP
.RS 4
\fIe\fP The canvas to attach the pointer to 
.RE
.PP
\fBReturns:\fP
.RS 4
The pointer attached 
.RE
.PP

.SS "EAPI void evas_data_attach_set (\fBEvas\fP * e, void * data)"
.PP
Attaches a specific pointer to the evas for fetching later. \fBParameters:\fP
.RS 4
\fIe\fP The canvas to attach the pointer to 
.br
\fIdata\fP The pointer to attach 
.RE
.PP

.SS "EAPI void evas_focus_in (\fBEvas\fP * e)"
.PP
Inform to the evas that it got the focus. \fBParameters:\fP
.RS 4
\fIe\fP The evas to change information. 
.RE
.PP

.PP
References EVAS_CALLBACK_CANVAS_FOCUS_IN.
.SS "EAPI void evas_focus_out (\fBEvas\fP * e)"
.PP
Inform to the evas that it lost the focus. \fBParameters:\fP
.RS 4
\fIe\fP The evas to change information. 
.RE
.PP

.PP
References EVAS_CALLBACK_CANVAS_FOCUS_OUT.
.SS "EAPI Eina_Bool evas_focus_state_get (const \fBEvas\fP * e)"
.PP
Get the focus state known by the given evas. \fBParameters:\fP
.RS 4
\fIe\fP The evas to query information. 
.RE
.PP

.SS "EAPI void evas_free (\fBEvas\fP * e)"
.PP
Frees the given evas and any objects created on it. Any objects with 'free' callbacks will have those callbacks called in this function.
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The given evas. 
.RE
.PP

.PP
References evas_font_path_clear(), and evas_render_idle_flush().
.SS "EAPI \fBEvas\fP* evas_new (void)"
.PP
Creates a new empty evas. Note that before you can use the evas, you will to at a minimum: 
.PD 0

.IP "\(bu" 2
Set its render method with \fBevas_output_method_set\fP . 
.IP "\(bu" 2
Set its viewport size with \fBevas_output_viewport_set\fP . 
.IP "\(bu" 2
Set its size of the canvas with \fBevas_output_size_set\fP . 
.IP "\(bu" 2
Ensure that the render engine is given the correct settings with \fBevas_engine_info_set\fP .
.PP
This function should only fail if the memory allocation fails
.PP
\fBNote:\fP
.RS 4
this function is very low level. Instead of using it directly, consider using the high level functions in Ecore_Evas such as \fCecore_evas_new()\fP. See http://docs.enlightenment.org/auto/ecore/.
.RE
.PP
\fBAttention:\fP
.RS 4
it is recommended that one calls \fBevas_init()\fP before creating new canvas.
.RE
.PP
\fBReturns:\fP
.RS 4
A new uninitialised Evas canvas on success. Otherwise, \fCNULL\fP. 
.RE
.PP

.SS "EAPI void evas_nochange_pop (\fBEvas\fP * e)"
.PP
Pop the nochange flag down 1. This tells evas, that while the nochange flag is greater than 0, do not mark objects as 'changed' when making changes.
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The evas to change information. 
.RE
.PP

.SS "EAPI void evas_nochange_push (\fBEvas\fP * e)"
.PP
Push the nochange flag up 1. This tells evas, that while the nochange flag is greater than 0, do not mark objects as 'changed' when making changes.
.PP
\fBParameters:\fP
.RS 4
\fIe\fP The evas to change information. 
.RE
.PP

.SS "EAPI void evas_norender (\fBEvas\fP * e)"
.PP
Update the canvas internal objects but not triggering immediate renderization. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer.
.RE
.PP
This function updates the canvas internal objects not triggering renderization. To force renderization function \fBevas_render()\fP should be used.
.PP
\fBSee also:\fP
.RS 4
\fBevas_render\fP. 
.RE
.PP

.SS "EAPI void evas_obscured_clear (\fBEvas\fP * e)"
.PP
Remove all obscured region rectangles from the canvas. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer.
.RE
.PP
This function removes all the rectangles from the obscured list of the canvas. It takes obscured areas added with \fBevas_obscured_rectangle_add()\fP and makes it a region that have to be repainted. 
.SS "EAPI void evas_obscured_rectangle_add (\fBEvas\fP * e, int x, int y, int w, int h)"
.PP
Add an obscured region. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.br
\fIx\fP The rectangle's left position. 
.br
\fIy\fP The rectangle's top position 
.br
\fIw\fP The rectangle's width. 
.br
\fIh\fP The rectangle's height.
.RE
.PP
This is the function by which one tells evas that a part of the canvas has not to be repainted. To make this region one that have to be repainted, call the function \fBevas_obscured_clear()\fP.
.PP
\fBSee also:\fP
.RS 4
\fBevas_obscured_clear()\fP. 
.RE
.PP

.SS "EAPI void evas_render (\fBEvas\fP * e)"
.PP
Force renderization of the given canvas. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.RE
.PP

.SS "EAPI void evas_render_idle_flush (\fBEvas\fP * e)"
.PP
Make the canvas discard internally cached data used for rendering. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer.
.RE
.PP
This function flushes the arrays of delete, active and render objects. Other things it may also discard are: shared memory segments, temporary scratch buffers, cached data to avoid re-compute of that data etc. 
.PP
Referenced by evas_free().
.SS "EAPI Eina_List* evas_render_updates (\fBEvas\fP * e)"
.PP
Force immediate renderization of the given canvas. \fBParameters:\fP
.RS 4
\fIe\fP The given canvas pointer. 
.RE
.PP
\fBReturns:\fP
.RS 4
A newly allocated list of updated rectangles of the canvas. Free this list with \fBevas_render_updates_free()\fP.
.RE
.PP
This function forces an immediate renderization update of the given given canvas. 
.SS "EAPI void evas_render_updates_free (Eina_List * updates)"
.PP
Free the rectangles returned by \fBevas_render_updates()\fP. \fBParameters:\fP
.RS 4
\fIupdates\fP The list of updated rectangles of the canvas.
.RE
.PP
This function removes the region from the render updates list. It makes the region doesn't be render updated anymore. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Evas from the source code.
